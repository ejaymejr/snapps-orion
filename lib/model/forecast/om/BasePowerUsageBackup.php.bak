<?php


abstract class BasePowerUsageBackup extends BaseObject  implements Persistent {


	
	protected static $peer;


	
	protected $id;


	
	protected $date;


	
	protected $time;


	
	protected $ampm = 'am';


	
	protected $reading = 0;


	
	protected $consumption = 0;


	
	protected $unit;


	
	protected $unit_price = 0;


	
	protected $conversion_factor = 0;


	
	protected $total_cost = 0;


	
	protected $created_by;


	
	protected $date_created;


	
	protected $modified_by;


	
	protected $date_modified;

	
	protected $alreadyInSave = false;

	
	protected $alreadyInValidation = false;

	
	public function getId()
	{

		return $this->id;
	}

	
	public function getDate($format = 'Y-m-d')
	{

		if ($this->date === null || $this->date === '') {
			return null;
		} elseif (!is_int($this->date)) {
						$ts = strtotime($this->date);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse value of [date] as date/time value: " . var_export($this->date, true));
			}
		} else {
			$ts = $this->date;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	
	public function getTime($format = 'Y-m-d H:i:s')
	{

		if ($this->time === null || $this->time === '') {
			return null;
		} elseif (!is_int($this->time)) {
						$ts = strtotime($this->time);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse value of [time] as date/time value: " . var_export($this->time, true));
			}
		} else {
			$ts = $this->time;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	
	public function getAmpm()
	{

		return $this->ampm;
	}

	
	public function getReading()
	{

		return $this->reading;
	}

	
	public function getConsumption()
	{

		return $this->consumption;
	}

	
	public function getUnit()
	{

		return $this->unit;
	}

	
	public function getUnitPrice()
	{

		return $this->unit_price;
	}

	
	public function getConversionFactor()
	{

		return $this->conversion_factor;
	}

	
	public function getTotalCost()
	{

		return $this->total_cost;
	}

	
	public function getCreatedBy()
	{

		return $this->created_by;
	}

	
	public function getDateCreated($format = 'Y-m-d H:i:s')
	{

		if ($this->date_created === null || $this->date_created === '') {
			return null;
		} elseif (!is_int($this->date_created)) {
						$ts = strtotime($this->date_created);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse value of [date_created] as date/time value: " . var_export($this->date_created, true));
			}
		} else {
			$ts = $this->date_created;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	
	public function getModifiedBy()
	{

		return $this->modified_by;
	}

	
	public function getDateModified($format = 'Y-m-d H:i:s')
	{

		if ($this->date_modified === null || $this->date_modified === '') {
			return null;
		} elseif (!is_int($this->date_modified)) {
						$ts = strtotime($this->date_modified);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse value of [date_modified] as date/time value: " . var_export($this->date_modified, true));
			}
		} else {
			$ts = $this->date_modified;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	
	public function setId($v)
	{

						if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::ID;
		}

	} 
	
	public function setDate($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse date/time value for [date] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->date !== $ts) {
			$this->date = $ts;
			$this->modifiedColumns[] = PowerUsageBackupPeer::DATE;
		}

	} 
	
	public function setTime($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse date/time value for [time] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->time !== $ts) {
			$this->time = $ts;
			$this->modifiedColumns[] = PowerUsageBackupPeer::TIME;
		}

	} 
	
	public function setAmpm($v)
	{

						if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->ampm !== $v || $v === 'am') {
			$this->ampm = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::AMPM;
		}

	} 
	
	public function setReading($v)
	{

		if ($this->reading !== $v || $v === 0) {
			$this->reading = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::READING;
		}

	} 
	
	public function setConsumption($v)
	{

		if ($this->consumption !== $v || $v === 0) {
			$this->consumption = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::CONSUMPTION;
		}

	} 
	
	public function setUnit($v)
	{

						if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->unit !== $v) {
			$this->unit = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::UNIT;
		}

	} 
	
	public function setUnitPrice($v)
	{

		if ($this->unit_price !== $v || $v === 0) {
			$this->unit_price = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::UNIT_PRICE;
		}

	} 
	
	public function setConversionFactor($v)
	{

		if ($this->conversion_factor !== $v || $v === 0) {
			$this->conversion_factor = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::CONVERSION_FACTOR;
		}

	} 
	
	public function setTotalCost($v)
	{

		if ($this->total_cost !== $v || $v === 0) {
			$this->total_cost = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::TOTAL_COST;
		}

	} 
	
	public function setCreatedBy($v)
	{

						if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::CREATED_BY;
		}

	} 
	
	public function setDateCreated($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse date/time value for [date_created] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->date_created !== $ts) {
			$this->date_created = $ts;
			$this->modifiedColumns[] = PowerUsageBackupPeer::DATE_CREATED;
		}

	} 
	
	public function setModifiedBy($v)
	{

						if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->modified_by !== $v) {
			$this->modified_by = $v;
			$this->modifiedColumns[] = PowerUsageBackupPeer::MODIFIED_BY;
		}

	} 
	
	public function setDateModified($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { 				throw new PropelException("Unable to parse date/time value for [date_modified] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->date_modified !== $ts) {
			$this->date_modified = $ts;
			$this->modifiedColumns[] = PowerUsageBackupPeer::DATE_MODIFIED;
		}

	} 
	
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->id = $rs->getInt($startcol + 0);

			$this->date = $rs->getDate($startcol + 1, null);

			$this->time = $rs->getTimestamp($startcol + 2, null);

			$this->ampm = $rs->getString($startcol + 3);

			$this->reading = $rs->getFloat($startcol + 4);

			$this->consumption = $rs->getFloat($startcol + 5);

			$this->unit = $rs->getString($startcol + 6);

			$this->unit_price = $rs->getFloat($startcol + 7);

			$this->conversion_factor = $rs->getFloat($startcol + 8);

			$this->total_cost = $rs->getFloat($startcol + 9);

			$this->created_by = $rs->getString($startcol + 10);

			$this->date_created = $rs->getTimestamp($startcol + 11, null);

			$this->modified_by = $rs->getString($startcol + 12);

			$this->date_modified = $rs->getTimestamp($startcol + 13, null);

			$this->resetModified();

			$this->setNew(false);

						return $startcol + 14; 
		} catch (Exception $e) {
			throw new PropelException("Error populating PowerUsageBackup object", $e);
		}
	}

	
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PowerUsageBackupPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			PowerUsageBackupPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PowerUsageBackupPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	
	protected function doSave($con)
	{
		$affectedRows = 0; 		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


						if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PowerUsageBackupPeer::doInsert($this, $con);
					$affectedRows += 1; 										 										 
					$this->setId($pk);  
					$this->setNew(false);
				} else {
					$affectedRows += PowerUsageBackupPeer::doUpdate($this, $con);
				}
				$this->resetModified(); 			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} 
	
	protected $validationFailures = array();

	
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PowerUsageBackupPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PowerUsageBackupPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->getByPosition($pos);
	}

	
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getDate();
				break;
			case 2:
				return $this->getTime();
				break;
			case 3:
				return $this->getAmpm();
				break;
			case 4:
				return $this->getReading();
				break;
			case 5:
				return $this->getConsumption();
				break;
			case 6:
				return $this->getUnit();
				break;
			case 7:
				return $this->getUnitPrice();
				break;
			case 8:
				return $this->getConversionFactor();
				break;
			case 9:
				return $this->getTotalCost();
				break;
			case 10:
				return $this->getCreatedBy();
				break;
			case 11:
				return $this->getDateCreated();
				break;
			case 12:
				return $this->getModifiedBy();
				break;
			case 13:
				return $this->getDateModified();
				break;
			default:
				return null;
				break;
		} 	}

	
	public function toArray($keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PowerUsageBackupPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getDate(),
			$keys[2] => $this->getTime(),
			$keys[3] => $this->getAmpm(),
			$keys[4] => $this->getReading(),
			$keys[5] => $this->getConsumption(),
			$keys[6] => $this->getUnit(),
			$keys[7] => $this->getUnitPrice(),
			$keys[8] => $this->getConversionFactor(),
			$keys[9] => $this->getTotalCost(),
			$keys[10] => $this->getCreatedBy(),
			$keys[11] => $this->getDateCreated(),
			$keys[12] => $this->getModifiedBy(),
			$keys[13] => $this->getDateModified(),
		);
		return $result;
	}

	
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PowerUsageBackupPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setDate($value);
				break;
			case 2:
				$this->setTime($value);
				break;
			case 3:
				$this->setAmpm($value);
				break;
			case 4:
				$this->setReading($value);
				break;
			case 5:
				$this->setConsumption($value);
				break;
			case 6:
				$this->setUnit($value);
				break;
			case 7:
				$this->setUnitPrice($value);
				break;
			case 8:
				$this->setConversionFactor($value);
				break;
			case 9:
				$this->setTotalCost($value);
				break;
			case 10:
				$this->setCreatedBy($value);
				break;
			case 11:
				$this->setDateCreated($value);
				break;
			case 12:
				$this->setModifiedBy($value);
				break;
			case 13:
				$this->setDateModified($value);
				break;
		} 	}

	
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PowerUsageBackupPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDate($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTime($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAmpm($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setReading($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setConsumption($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUnit($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setUnitPrice($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setConversionFactor($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTotalCost($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCreatedBy($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDateCreated($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setModifiedBy($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDateModified($arr[$keys[13]]);
	}

	
	public function buildCriteria()
	{
		$criteria = new Criteria(PowerUsageBackupPeer::DATABASE_NAME);

		if ($this->isColumnModified(PowerUsageBackupPeer::ID)) $criteria->add(PowerUsageBackupPeer::ID, $this->id);
		if ($this->isColumnModified(PowerUsageBackupPeer::DATE)) $criteria->add(PowerUsageBackupPeer::DATE, $this->date);
		if ($this->isColumnModified(PowerUsageBackupPeer::TIME)) $criteria->add(PowerUsageBackupPeer::TIME, $this->time);
		if ($this->isColumnModified(PowerUsageBackupPeer::AMPM)) $criteria->add(PowerUsageBackupPeer::AMPM, $this->ampm);
		if ($this->isColumnModified(PowerUsageBackupPeer::READING)) $criteria->add(PowerUsageBackupPeer::READING, $this->reading);
		if ($this->isColumnModified(PowerUsageBackupPeer::CONSUMPTION)) $criteria->add(PowerUsageBackupPeer::CONSUMPTION, $this->consumption);
		if ($this->isColumnModified(PowerUsageBackupPeer::UNIT)) $criteria->add(PowerUsageBackupPeer::UNIT, $this->unit);
		if ($this->isColumnModified(PowerUsageBackupPeer::UNIT_PRICE)) $criteria->add(PowerUsageBackupPeer::UNIT_PRICE, $this->unit_price);
		if ($this->isColumnModified(PowerUsageBackupPeer::CONVERSION_FACTOR)) $criteria->add(PowerUsageBackupPeer::CONVERSION_FACTOR, $this->conversion_factor);
		if ($this->isColumnModified(PowerUsageBackupPeer::TOTAL_COST)) $criteria->add(PowerUsageBackupPeer::TOTAL_COST, $this->total_cost);
		if ($this->isColumnModified(PowerUsageBackupPeer::CREATED_BY)) $criteria->add(PowerUsageBackupPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(PowerUsageBackupPeer::DATE_CREATED)) $criteria->add(PowerUsageBackupPeer::DATE_CREATED, $this->date_created);
		if ($this->isColumnModified(PowerUsageBackupPeer::MODIFIED_BY)) $criteria->add(PowerUsageBackupPeer::MODIFIED_BY, $this->modified_by);
		if ($this->isColumnModified(PowerUsageBackupPeer::DATE_MODIFIED)) $criteria->add(PowerUsageBackupPeer::DATE_MODIFIED, $this->date_modified);

		return $criteria;
	}

	
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PowerUsageBackupPeer::DATABASE_NAME);

		$criteria->add(PowerUsageBackupPeer::ID, $this->id);

		return $criteria;
	}

	
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setDate($this->date);

		$copyObj->setTime($this->time);

		$copyObj->setAmpm($this->ampm);

		$copyObj->setReading($this->reading);

		$copyObj->setConsumption($this->consumption);

		$copyObj->setUnit($this->unit);

		$copyObj->setUnitPrice($this->unit_price);

		$copyObj->setConversionFactor($this->conversion_factor);

		$copyObj->setTotalCost($this->total_cost);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setDateCreated($this->date_created);

		$copyObj->setModifiedBy($this->modified_by);

		$copyObj->setDateModified($this->date_modified);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); 
	}

	
	public function copy($deepCopy = false)
	{
				$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PowerUsageBackupPeer();
		}
		return self::$peer;
	}

} 